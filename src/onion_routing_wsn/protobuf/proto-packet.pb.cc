// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto-packet.proto

#include "proto-packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protomessage {
constexpr ProtoPacket_OnionHead::ProtoPacket_OnionHead(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : onion_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , padding_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , onionid_(0){}
struct ProtoPacket_OnionHeadDefaultTypeInternal {
  constexpr ProtoPacket_OnionHeadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtoPacket_OnionHeadDefaultTypeInternal() {}
  union {
    ProtoPacket_OnionHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtoPacket_OnionHeadDefaultTypeInternal _ProtoPacket_OnionHead_default_instance_;
constexpr ProtoPacket_OnionBody::ProtoPacket_OnionBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : padding_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , aggregatedvalue_(0){}
struct ProtoPacket_OnionBodyDefaultTypeInternal {
  constexpr ProtoPacket_OnionBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtoPacket_OnionBodyDefaultTypeInternal() {}
  union {
    ProtoPacket_OnionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtoPacket_OnionBodyDefaultTypeInternal _ProtoPacket_OnionBody_default_instance_;
constexpr ProtoPacket_Handshake::ProtoPacket_Handshake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publickey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProtoPacket_HandshakeDefaultTypeInternal {
  constexpr ProtoPacket_HandshakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtoPacket_HandshakeDefaultTypeInternal() {}
  union {
    ProtoPacket_Handshake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtoPacket_HandshakeDefaultTypeInternal _ProtoPacket_Handshake_default_instance_;
constexpr ProtoPacket::ProtoPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : h_shake_(nullptr)
  , o_head_(nullptr)
  , o_body_(nullptr){}
struct ProtoPacketDefaultTypeInternal {
  constexpr ProtoPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtoPacketDefaultTypeInternal() {}
  union {
    ProtoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtoPacketDefaultTypeInternal _ProtoPacket_default_instance_;
}  // namespace protomessage
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2dpacket_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2dpacket_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2dpacket_2eproto = nullptr;

const uint32_t TableStruct_proto_2dpacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket_OnionHead, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket_OnionHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket_OnionHead, onionid_),
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket_OnionHead, onion_message_),
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket_OnionHead, padding_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket_OnionBody, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket_OnionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket_OnionBody, aggregatedvalue_),
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket_OnionBody, padding_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket_Handshake, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket_Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket_Handshake, publickey_),
  0,
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket, h_shake_),
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket, o_head_),
  PROTOBUF_FIELD_OFFSET(::protomessage::ProtoPacket, o_body_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::protomessage::ProtoPacket_OnionHead)},
  { 12, 20, -1, sizeof(::protomessage::ProtoPacket_OnionBody)},
  { 22, 29, -1, sizeof(::protomessage::ProtoPacket_Handshake)},
  { 30, 39, -1, sizeof(::protomessage::ProtoPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protomessage::_ProtoPacket_OnionHead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protomessage::_ProtoPacket_OnionBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protomessage::_ProtoPacket_Handshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protomessage::_ProtoPacket_default_instance_),
};

const char descriptor_table_protodef_proto_2dpacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022proto-packet.proto\022\014protomessage\"\361\003\n\013P"
  "rotoPacket\0229\n\007h_shake\030\001 \001(\0132#.protomessa"
  "ge.ProtoPacket.HandshakeH\000\210\001\001\0228\n\006o_head\030"
  "\002 \001(\0132#.protomessage.ProtoPacket.OnionHe"
  "adH\001\210\001\001\0228\n\006o_body\030\003 \001(\0132#.protomessage.P"
  "rotoPacket.OnionBodyH\002\210\001\001\032}\n\tOnionHead\022\024"
  "\n\007onionId\030\001 \001(\005H\000\210\001\001\022\032\n\ronion_message\030\002 "
  "\001(\014H\001\210\001\001\022\024\n\007padding\030\003 \001(\014H\002\210\001\001B\n\n\010_onion"
  "IdB\020\n\016_onion_messageB\n\n\010_padding\032_\n\tOnio"
  "nBody\022\034\n\017aggregatedValue\030\001 \001(\005H\000\210\001\001\022\024\n\007p"
  "adding\030\002 \001(\014H\001\210\001\001B\022\n\020_aggregatedValueB\n\n"
  "\010_padding\0321\n\tHandshake\022\026\n\tpublickey\030\001 \001("
  "\014H\000\210\001\001B\014\n\n_publickeyB\n\n\010_h_shakeB\t\n\007_o_h"
  "eadB\t\n\007_o_bodyb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2dpacket_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2dpacket_2eproto = {
  false, false, 542, descriptor_table_protodef_proto_2dpacket_2eproto, "proto-packet.proto", 
  &descriptor_table_proto_2dpacket_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_proto_2dpacket_2eproto::offsets,
  file_level_metadata_proto_2dpacket_2eproto, file_level_enum_descriptors_proto_2dpacket_2eproto, file_level_service_descriptors_proto_2dpacket_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2dpacket_2eproto_getter() {
  return &descriptor_table_proto_2dpacket_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2dpacket_2eproto(&descriptor_table_proto_2dpacket_2eproto);
namespace protomessage {

// ===================================================================

class ProtoPacket_OnionHead::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoPacket_OnionHead>()._has_bits_);
  static void set_has_onionid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_onion_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProtoPacket_OnionHead::ProtoPacket_OnionHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protomessage.ProtoPacket.OnionHead)
}
ProtoPacket_OnionHead::ProtoPacket_OnionHead(const ProtoPacket_OnionHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  onion_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    onion_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_onion_message()) {
    onion_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_onion_message(), 
      GetArenaForAllocation());
  }
  padding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    padding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_padding()) {
    padding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_padding(), 
      GetArenaForAllocation());
  }
  onionid_ = from.onionid_;
  // @@protoc_insertion_point(copy_constructor:protomessage.ProtoPacket.OnionHead)
}

inline void ProtoPacket_OnionHead::SharedCtor() {
onion_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  onion_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
padding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  padding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
onionid_ = 0;
}

ProtoPacket_OnionHead::~ProtoPacket_OnionHead() {
  // @@protoc_insertion_point(destructor:protomessage.ProtoPacket.OnionHead)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtoPacket_OnionHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  onion_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  padding_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoPacket_OnionHead::ArenaDtor(void* object) {
  ProtoPacket_OnionHead* _this = reinterpret_cast< ProtoPacket_OnionHead* >(object);
  (void)_this;
}
void ProtoPacket_OnionHead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoPacket_OnionHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtoPacket_OnionHead::Clear() {
// @@protoc_insertion_point(message_clear_start:protomessage.ProtoPacket.OnionHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      onion_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      padding_.ClearNonDefaultToEmpty();
    }
  }
  onionid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoPacket_OnionHead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 onionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_onionid(&has_bits);
          onionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes onion_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_onion_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_padding();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoPacket_OnionHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protomessage.ProtoPacket.OnionHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 onionId = 1;
  if (_internal_has_onionid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_onionid(), target);
  }

  // optional bytes onion_message = 2;
  if (_internal_has_onion_message()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_onion_message(), target);
  }

  // optional bytes padding = 3;
  if (_internal_has_padding()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_padding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protomessage.ProtoPacket.OnionHead)
  return target;
}

size_t ProtoPacket_OnionHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protomessage.ProtoPacket.OnionHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes onion_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_onion_message());
    }

    // optional bytes padding = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_padding());
    }

    // optional int32 onionId = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_onionid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoPacket_OnionHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtoPacket_OnionHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoPacket_OnionHead::GetClassData() const { return &_class_data_; }

void ProtoPacket_OnionHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtoPacket_OnionHead *>(to)->MergeFrom(
      static_cast<const ProtoPacket_OnionHead &>(from));
}


void ProtoPacket_OnionHead::MergeFrom(const ProtoPacket_OnionHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protomessage.ProtoPacket.OnionHead)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_onion_message(from._internal_onion_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_padding(from._internal_padding());
    }
    if (cached_has_bits & 0x00000004u) {
      onionid_ = from.onionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoPacket_OnionHead::CopyFrom(const ProtoPacket_OnionHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protomessage.ProtoPacket.OnionHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPacket_OnionHead::IsInitialized() const {
  return true;
}

void ProtoPacket_OnionHead::InternalSwap(ProtoPacket_OnionHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &onion_message_, lhs_arena,
      &other->onion_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &padding_, lhs_arena,
      &other->padding_, rhs_arena
  );
  swap(onionid_, other->onionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoPacket_OnionHead::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2dpacket_2eproto_getter, &descriptor_table_proto_2dpacket_2eproto_once,
      file_level_metadata_proto_2dpacket_2eproto[0]);
}

// ===================================================================

class ProtoPacket_OnionBody::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoPacket_OnionBody>()._has_bits_);
  static void set_has_aggregatedvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProtoPacket_OnionBody::ProtoPacket_OnionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protomessage.ProtoPacket.OnionBody)
}
ProtoPacket_OnionBody::ProtoPacket_OnionBody(const ProtoPacket_OnionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  padding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    padding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_padding()) {
    padding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_padding(), 
      GetArenaForAllocation());
  }
  aggregatedvalue_ = from.aggregatedvalue_;
  // @@protoc_insertion_point(copy_constructor:protomessage.ProtoPacket.OnionBody)
}

inline void ProtoPacket_OnionBody::SharedCtor() {
padding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  padding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
aggregatedvalue_ = 0;
}

ProtoPacket_OnionBody::~ProtoPacket_OnionBody() {
  // @@protoc_insertion_point(destructor:protomessage.ProtoPacket.OnionBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtoPacket_OnionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  padding_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoPacket_OnionBody::ArenaDtor(void* object) {
  ProtoPacket_OnionBody* _this = reinterpret_cast< ProtoPacket_OnionBody* >(object);
  (void)_this;
}
void ProtoPacket_OnionBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoPacket_OnionBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtoPacket_OnionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:protomessage.ProtoPacket.OnionBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    padding_.ClearNonDefaultToEmpty();
  }
  aggregatedvalue_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoPacket_OnionBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 aggregatedValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_aggregatedvalue(&has_bits);
          aggregatedvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes padding = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_padding();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoPacket_OnionBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protomessage.ProtoPacket.OnionBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 aggregatedValue = 1;
  if (_internal_has_aggregatedvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_aggregatedvalue(), target);
  }

  // optional bytes padding = 2;
  if (_internal_has_padding()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_padding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protomessage.ProtoPacket.OnionBody)
  return target;
}

size_t ProtoPacket_OnionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protomessage.ProtoPacket.OnionBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes padding = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_padding());
    }

    // optional int32 aggregatedValue = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_aggregatedvalue());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoPacket_OnionBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtoPacket_OnionBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoPacket_OnionBody::GetClassData() const { return &_class_data_; }

void ProtoPacket_OnionBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtoPacket_OnionBody *>(to)->MergeFrom(
      static_cast<const ProtoPacket_OnionBody &>(from));
}


void ProtoPacket_OnionBody::MergeFrom(const ProtoPacket_OnionBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protomessage.ProtoPacket.OnionBody)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_padding(from._internal_padding());
    }
    if (cached_has_bits & 0x00000002u) {
      aggregatedvalue_ = from.aggregatedvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoPacket_OnionBody::CopyFrom(const ProtoPacket_OnionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protomessage.ProtoPacket.OnionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPacket_OnionBody::IsInitialized() const {
  return true;
}

void ProtoPacket_OnionBody::InternalSwap(ProtoPacket_OnionBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &padding_, lhs_arena,
      &other->padding_, rhs_arena
  );
  swap(aggregatedvalue_, other->aggregatedvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoPacket_OnionBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2dpacket_2eproto_getter, &descriptor_table_proto_2dpacket_2eproto_once,
      file_level_metadata_proto_2dpacket_2eproto[1]);
}

// ===================================================================

class ProtoPacket_Handshake::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoPacket_Handshake>()._has_bits_);
  static void set_has_publickey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProtoPacket_Handshake::ProtoPacket_Handshake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protomessage.ProtoPacket.Handshake)
}
ProtoPacket_Handshake::ProtoPacket_Handshake(const ProtoPacket_Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_publickey()) {
    publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_publickey(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protomessage.ProtoPacket.Handshake)
}

inline void ProtoPacket_Handshake::SharedCtor() {
publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoPacket_Handshake::~ProtoPacket_Handshake() {
  // @@protoc_insertion_point(destructor:protomessage.ProtoPacket.Handshake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtoPacket_Handshake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoPacket_Handshake::ArenaDtor(void* object) {
  ProtoPacket_Handshake* _this = reinterpret_cast< ProtoPacket_Handshake* >(object);
  (void)_this;
}
void ProtoPacket_Handshake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoPacket_Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtoPacket_Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:protomessage.ProtoPacket.Handshake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    publickey_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoPacket_Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes publickey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_publickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoPacket_Handshake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protomessage.ProtoPacket.Handshake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bytes publickey = 1;
  if (_internal_has_publickey()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_publickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protomessage.ProtoPacket.Handshake)
  return target;
}

size_t ProtoPacket_Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protomessage.ProtoPacket.Handshake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes publickey = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_publickey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoPacket_Handshake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtoPacket_Handshake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoPacket_Handshake::GetClassData() const { return &_class_data_; }

void ProtoPacket_Handshake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtoPacket_Handshake *>(to)->MergeFrom(
      static_cast<const ProtoPacket_Handshake &>(from));
}


void ProtoPacket_Handshake::MergeFrom(const ProtoPacket_Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protomessage.ProtoPacket.Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_publickey()) {
    _internal_set_publickey(from._internal_publickey());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoPacket_Handshake::CopyFrom(const ProtoPacket_Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protomessage.ProtoPacket.Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPacket_Handshake::IsInitialized() const {
  return true;
}

void ProtoPacket_Handshake::InternalSwap(ProtoPacket_Handshake* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &publickey_, lhs_arena,
      &other->publickey_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoPacket_Handshake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2dpacket_2eproto_getter, &descriptor_table_proto_2dpacket_2eproto_once,
      file_level_metadata_proto_2dpacket_2eproto[2]);
}

// ===================================================================

class ProtoPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoPacket>()._has_bits_);
  static const ::protomessage::ProtoPacket_Handshake& h_shake(const ProtoPacket* msg);
  static void set_has_h_shake(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protomessage::ProtoPacket_OnionHead& o_head(const ProtoPacket* msg);
  static void set_has_o_head(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protomessage::ProtoPacket_OnionBody& o_body(const ProtoPacket* msg);
  static void set_has_o_body(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protomessage::ProtoPacket_Handshake&
ProtoPacket::_Internal::h_shake(const ProtoPacket* msg) {
  return *msg->h_shake_;
}
const ::protomessage::ProtoPacket_OnionHead&
ProtoPacket::_Internal::o_head(const ProtoPacket* msg) {
  return *msg->o_head_;
}
const ::protomessage::ProtoPacket_OnionBody&
ProtoPacket::_Internal::o_body(const ProtoPacket* msg) {
  return *msg->o_body_;
}
ProtoPacket::ProtoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protomessage.ProtoPacket)
}
ProtoPacket::ProtoPacket(const ProtoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_h_shake()) {
    h_shake_ = new ::protomessage::ProtoPacket_Handshake(*from.h_shake_);
  } else {
    h_shake_ = nullptr;
  }
  if (from._internal_has_o_head()) {
    o_head_ = new ::protomessage::ProtoPacket_OnionHead(*from.o_head_);
  } else {
    o_head_ = nullptr;
  }
  if (from._internal_has_o_body()) {
    o_body_ = new ::protomessage::ProtoPacket_OnionBody(*from.o_body_);
  } else {
    o_body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protomessage.ProtoPacket)
}

inline void ProtoPacket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&h_shake_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&o_body_) -
    reinterpret_cast<char*>(&h_shake_)) + sizeof(o_body_));
}

ProtoPacket::~ProtoPacket() {
  // @@protoc_insertion_point(destructor:protomessage.ProtoPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete h_shake_;
  if (this != internal_default_instance()) delete o_head_;
  if (this != internal_default_instance()) delete o_body_;
}

void ProtoPacket::ArenaDtor(void* object) {
  ProtoPacket* _this = reinterpret_cast< ProtoPacket* >(object);
  (void)_this;
}
void ProtoPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:protomessage.ProtoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(h_shake_ != nullptr);
      h_shake_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(o_head_ != nullptr);
      o_head_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(o_body_ != nullptr);
      o_body_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protomessage.ProtoPacket.Handshake h_shake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_h_shake(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protomessage.ProtoPacket.OnionHead o_head = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_o_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protomessage.ProtoPacket.OnionBody o_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_o_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protomessage.ProtoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .protomessage.ProtoPacket.Handshake h_shake = 1;
  if (_internal_has_h_shake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::h_shake(this), target, stream);
  }

  // optional .protomessage.ProtoPacket.OnionHead o_head = 2;
  if (_internal_has_o_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::o_head(this), target, stream);
  }

  // optional .protomessage.ProtoPacket.OnionBody o_body = 3;
  if (_internal_has_o_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::o_body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protomessage.ProtoPacket)
  return target;
}

size_t ProtoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protomessage.ProtoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .protomessage.ProtoPacket.Handshake h_shake = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *h_shake_);
    }

    // optional .protomessage.ProtoPacket.OnionHead o_head = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *o_head_);
    }

    // optional .protomessage.ProtoPacket.OnionBody o_body = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *o_body_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoPacket::GetClassData() const { return &_class_data_; }

void ProtoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtoPacket *>(to)->MergeFrom(
      static_cast<const ProtoPacket &>(from));
}


void ProtoPacket::MergeFrom(const ProtoPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protomessage.ProtoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_h_shake()->::protomessage::ProtoPacket_Handshake::MergeFrom(from._internal_h_shake());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_o_head()->::protomessage::ProtoPacket_OnionHead::MergeFrom(from._internal_o_head());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_o_body()->::protomessage::ProtoPacket_OnionBody::MergeFrom(from._internal_o_body());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoPacket::CopyFrom(const ProtoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protomessage.ProtoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPacket::IsInitialized() const {
  return true;
}

void ProtoPacket::InternalSwap(ProtoPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoPacket, o_body_)
      + sizeof(ProtoPacket::o_body_)
      - PROTOBUF_FIELD_OFFSET(ProtoPacket, h_shake_)>(
          reinterpret_cast<char*>(&h_shake_),
          reinterpret_cast<char*>(&other->h_shake_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2dpacket_2eproto_getter, &descriptor_table_proto_2dpacket_2eproto_once,
      file_level_metadata_proto_2dpacket_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protomessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protomessage::ProtoPacket_OnionHead* Arena::CreateMaybeMessage< ::protomessage::ProtoPacket_OnionHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protomessage::ProtoPacket_OnionHead >(arena);
}
template<> PROTOBUF_NOINLINE ::protomessage::ProtoPacket_OnionBody* Arena::CreateMaybeMessage< ::protomessage::ProtoPacket_OnionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protomessage::ProtoPacket_OnionBody >(arena);
}
template<> PROTOBUF_NOINLINE ::protomessage::ProtoPacket_Handshake* Arena::CreateMaybeMessage< ::protomessage::ProtoPacket_Handshake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protomessage::ProtoPacket_Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::protomessage::ProtoPacket* Arena::CreateMaybeMessage< ::protomessage::ProtoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protomessage::ProtoPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
