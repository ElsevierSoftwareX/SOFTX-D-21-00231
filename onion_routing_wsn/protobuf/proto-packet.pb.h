// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto-packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2dpacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2dpacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2dpacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2dpacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2dpacket_2eproto;
namespace protomessage {
class ProtoPacket;
struct ProtoPacketDefaultTypeInternal;
extern ProtoPacketDefaultTypeInternal _ProtoPacket_default_instance_;
class ProtoPacket_Handshake;
struct ProtoPacket_HandshakeDefaultTypeInternal;
extern ProtoPacket_HandshakeDefaultTypeInternal _ProtoPacket_Handshake_default_instance_;
class ProtoPacket_OnionBody;
struct ProtoPacket_OnionBodyDefaultTypeInternal;
extern ProtoPacket_OnionBodyDefaultTypeInternal _ProtoPacket_OnionBody_default_instance_;
class ProtoPacket_OnionHead;
struct ProtoPacket_OnionHeadDefaultTypeInternal;
extern ProtoPacket_OnionHeadDefaultTypeInternal _ProtoPacket_OnionHead_default_instance_;
}  // namespace protomessage
PROTOBUF_NAMESPACE_OPEN
template<> ::protomessage::ProtoPacket* Arena::CreateMaybeMessage<::protomessage::ProtoPacket>(Arena*);
template<> ::protomessage::ProtoPacket_Handshake* Arena::CreateMaybeMessage<::protomessage::ProtoPacket_Handshake>(Arena*);
template<> ::protomessage::ProtoPacket_OnionBody* Arena::CreateMaybeMessage<::protomessage::ProtoPacket_OnionBody>(Arena*);
template<> ::protomessage::ProtoPacket_OnionHead* Arena::CreateMaybeMessage<::protomessage::ProtoPacket_OnionHead>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protomessage {

// ===================================================================

class ProtoPacket_OnionHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protomessage.ProtoPacket.OnionHead) */ {
 public:
  inline ProtoPacket_OnionHead() : ProtoPacket_OnionHead(nullptr) {}
  ~ProtoPacket_OnionHead() override;
  explicit constexpr ProtoPacket_OnionHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoPacket_OnionHead(const ProtoPacket_OnionHead& from);
  ProtoPacket_OnionHead(ProtoPacket_OnionHead&& from) noexcept
    : ProtoPacket_OnionHead() {
    *this = ::std::move(from);
  }

  inline ProtoPacket_OnionHead& operator=(const ProtoPacket_OnionHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoPacket_OnionHead& operator=(ProtoPacket_OnionHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoPacket_OnionHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoPacket_OnionHead* internal_default_instance() {
    return reinterpret_cast<const ProtoPacket_OnionHead*>(
               &_ProtoPacket_OnionHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoPacket_OnionHead& a, ProtoPacket_OnionHead& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoPacket_OnionHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoPacket_OnionHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoPacket_OnionHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoPacket_OnionHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtoPacket_OnionHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtoPacket_OnionHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoPacket_OnionHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protomessage.ProtoPacket.OnionHead";
  }
  protected:
  explicit ProtoPacket_OnionHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnionMessageFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kOnionIdFieldNumber = 1,
  };
  // optional bytes onion_message = 2;
  bool has_onion_message() const;
  private:
  bool _internal_has_onion_message() const;
  public:
  void clear_onion_message();
  const std::string& onion_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_onion_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_onion_message();
  PROTOBUF_NODISCARD std::string* release_onion_message();
  void set_allocated_onion_message(std::string* onion_message);
  private:
  const std::string& _internal_onion_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_onion_message(const std::string& value);
  std::string* _internal_mutable_onion_message();
  public:

  // optional bytes padding = 3;
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  const std::string& padding() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_padding(ArgT0&& arg0, ArgT... args);
  std::string* mutable_padding();
  PROTOBUF_NODISCARD std::string* release_padding();
  void set_allocated_padding(std::string* padding);
  private:
  const std::string& _internal_padding() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_padding(const std::string& value);
  std::string* _internal_mutable_padding();
  public:

  // optional int32 onionId = 1;
  bool has_onionid() const;
  private:
  bool _internal_has_onionid() const;
  public:
  void clear_onionid();
  int32_t onionid() const;
  void set_onionid(int32_t value);
  private:
  int32_t _internal_onionid() const;
  void _internal_set_onionid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protomessage.ProtoPacket.OnionHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onion_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr padding_;
  int32_t onionid_;
  friend struct ::TableStruct_proto_2dpacket_2eproto;
};
// -------------------------------------------------------------------

class ProtoPacket_OnionBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protomessage.ProtoPacket.OnionBody) */ {
 public:
  inline ProtoPacket_OnionBody() : ProtoPacket_OnionBody(nullptr) {}
  ~ProtoPacket_OnionBody() override;
  explicit constexpr ProtoPacket_OnionBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoPacket_OnionBody(const ProtoPacket_OnionBody& from);
  ProtoPacket_OnionBody(ProtoPacket_OnionBody&& from) noexcept
    : ProtoPacket_OnionBody() {
    *this = ::std::move(from);
  }

  inline ProtoPacket_OnionBody& operator=(const ProtoPacket_OnionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoPacket_OnionBody& operator=(ProtoPacket_OnionBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoPacket_OnionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoPacket_OnionBody* internal_default_instance() {
    return reinterpret_cast<const ProtoPacket_OnionBody*>(
               &_ProtoPacket_OnionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoPacket_OnionBody& a, ProtoPacket_OnionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoPacket_OnionBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoPacket_OnionBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoPacket_OnionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoPacket_OnionBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtoPacket_OnionBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtoPacket_OnionBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoPacket_OnionBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protomessage.ProtoPacket.OnionBody";
  }
  protected:
  explicit ProtoPacket_OnionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaddingFieldNumber = 2,
    kAggregatedValueFieldNumber = 1,
  };
  // optional bytes padding = 2;
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  const std::string& padding() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_padding(ArgT0&& arg0, ArgT... args);
  std::string* mutable_padding();
  PROTOBUF_NODISCARD std::string* release_padding();
  void set_allocated_padding(std::string* padding);
  private:
  const std::string& _internal_padding() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_padding(const std::string& value);
  std::string* _internal_mutable_padding();
  public:

  // optional int32 aggregatedValue = 1;
  bool has_aggregatedvalue() const;
  private:
  bool _internal_has_aggregatedvalue() const;
  public:
  void clear_aggregatedvalue();
  int32_t aggregatedvalue() const;
  void set_aggregatedvalue(int32_t value);
  private:
  int32_t _internal_aggregatedvalue() const;
  void _internal_set_aggregatedvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protomessage.ProtoPacket.OnionBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr padding_;
  int32_t aggregatedvalue_;
  friend struct ::TableStruct_proto_2dpacket_2eproto;
};
// -------------------------------------------------------------------

class ProtoPacket_Handshake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protomessage.ProtoPacket.Handshake) */ {
 public:
  inline ProtoPacket_Handshake() : ProtoPacket_Handshake(nullptr) {}
  ~ProtoPacket_Handshake() override;
  explicit constexpr ProtoPacket_Handshake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoPacket_Handshake(const ProtoPacket_Handshake& from);
  ProtoPacket_Handshake(ProtoPacket_Handshake&& from) noexcept
    : ProtoPacket_Handshake() {
    *this = ::std::move(from);
  }

  inline ProtoPacket_Handshake& operator=(const ProtoPacket_Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoPacket_Handshake& operator=(ProtoPacket_Handshake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoPacket_Handshake& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoPacket_Handshake* internal_default_instance() {
    return reinterpret_cast<const ProtoPacket_Handshake*>(
               &_ProtoPacket_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProtoPacket_Handshake& a, ProtoPacket_Handshake& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoPacket_Handshake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoPacket_Handshake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoPacket_Handshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoPacket_Handshake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtoPacket_Handshake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtoPacket_Handshake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoPacket_Handshake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protomessage.ProtoPacket.Handshake";
  }
  protected:
  explicit ProtoPacket_Handshake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublickeyFieldNumber = 1,
  };
  // optional bytes publickey = 1;
  bool has_publickey() const;
  private:
  bool _internal_has_publickey() const;
  public:
  void clear_publickey();
  const std::string& publickey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publickey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publickey();
  PROTOBUF_NODISCARD std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // @@protoc_insertion_point(class_scope:protomessage.ProtoPacket.Handshake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  friend struct ::TableStruct_proto_2dpacket_2eproto;
};
// -------------------------------------------------------------------

class ProtoPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protomessage.ProtoPacket) */ {
 public:
  inline ProtoPacket() : ProtoPacket(nullptr) {}
  ~ProtoPacket() override;
  explicit constexpr ProtoPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoPacket(const ProtoPacket& from);
  ProtoPacket(ProtoPacket&& from) noexcept
    : ProtoPacket() {
    *this = ::std::move(from);
  }

  inline ProtoPacket& operator=(const ProtoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoPacket& operator=(ProtoPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoPacket* internal_default_instance() {
    return reinterpret_cast<const ProtoPacket*>(
               &_ProtoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProtoPacket& a, ProtoPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtoPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtoPacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protomessage.ProtoPacket";
  }
  protected:
  explicit ProtoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProtoPacket_OnionHead OnionHead;
  typedef ProtoPacket_OnionBody OnionBody;
  typedef ProtoPacket_Handshake Handshake;

  // accessors -------------------------------------------------------

  enum : int {
    kHShakeFieldNumber = 1,
    kOHeadFieldNumber = 2,
    kOBodyFieldNumber = 3,
  };
  // optional .protomessage.ProtoPacket.Handshake h_shake = 1;
  bool has_h_shake() const;
  private:
  bool _internal_has_h_shake() const;
  public:
  void clear_h_shake();
  const ::protomessage::ProtoPacket_Handshake& h_shake() const;
  PROTOBUF_NODISCARD ::protomessage::ProtoPacket_Handshake* release_h_shake();
  ::protomessage::ProtoPacket_Handshake* mutable_h_shake();
  void set_allocated_h_shake(::protomessage::ProtoPacket_Handshake* h_shake);
  private:
  const ::protomessage::ProtoPacket_Handshake& _internal_h_shake() const;
  ::protomessage::ProtoPacket_Handshake* _internal_mutable_h_shake();
  public:
  void unsafe_arena_set_allocated_h_shake(
      ::protomessage::ProtoPacket_Handshake* h_shake);
  ::protomessage::ProtoPacket_Handshake* unsafe_arena_release_h_shake();

  // optional .protomessage.ProtoPacket.OnionHead o_head = 2;
  bool has_o_head() const;
  private:
  bool _internal_has_o_head() const;
  public:
  void clear_o_head();
  const ::protomessage::ProtoPacket_OnionHead& o_head() const;
  PROTOBUF_NODISCARD ::protomessage::ProtoPacket_OnionHead* release_o_head();
  ::protomessage::ProtoPacket_OnionHead* mutable_o_head();
  void set_allocated_o_head(::protomessage::ProtoPacket_OnionHead* o_head);
  private:
  const ::protomessage::ProtoPacket_OnionHead& _internal_o_head() const;
  ::protomessage::ProtoPacket_OnionHead* _internal_mutable_o_head();
  public:
  void unsafe_arena_set_allocated_o_head(
      ::protomessage::ProtoPacket_OnionHead* o_head);
  ::protomessage::ProtoPacket_OnionHead* unsafe_arena_release_o_head();

  // optional .protomessage.ProtoPacket.OnionBody o_body = 3;
  bool has_o_body() const;
  private:
  bool _internal_has_o_body() const;
  public:
  void clear_o_body();
  const ::protomessage::ProtoPacket_OnionBody& o_body() const;
  PROTOBUF_NODISCARD ::protomessage::ProtoPacket_OnionBody* release_o_body();
  ::protomessage::ProtoPacket_OnionBody* mutable_o_body();
  void set_allocated_o_body(::protomessage::ProtoPacket_OnionBody* o_body);
  private:
  const ::protomessage::ProtoPacket_OnionBody& _internal_o_body() const;
  ::protomessage::ProtoPacket_OnionBody* _internal_mutable_o_body();
  public:
  void unsafe_arena_set_allocated_o_body(
      ::protomessage::ProtoPacket_OnionBody* o_body);
  ::protomessage::ProtoPacket_OnionBody* unsafe_arena_release_o_body();

  // @@protoc_insertion_point(class_scope:protomessage.ProtoPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protomessage::ProtoPacket_Handshake* h_shake_;
  ::protomessage::ProtoPacket_OnionHead* o_head_;
  ::protomessage::ProtoPacket_OnionBody* o_body_;
  friend struct ::TableStruct_proto_2dpacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoPacket_OnionHead

// optional int32 onionId = 1;
inline bool ProtoPacket_OnionHead::_internal_has_onionid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProtoPacket_OnionHead::has_onionid() const {
  return _internal_has_onionid();
}
inline void ProtoPacket_OnionHead::clear_onionid() {
  onionid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ProtoPacket_OnionHead::_internal_onionid() const {
  return onionid_;
}
inline int32_t ProtoPacket_OnionHead::onionid() const {
  // @@protoc_insertion_point(field_get:protomessage.ProtoPacket.OnionHead.onionId)
  return _internal_onionid();
}
inline void ProtoPacket_OnionHead::_internal_set_onionid(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  onionid_ = value;
}
inline void ProtoPacket_OnionHead::set_onionid(int32_t value) {
  _internal_set_onionid(value);
  // @@protoc_insertion_point(field_set:protomessage.ProtoPacket.OnionHead.onionId)
}

// optional bytes onion_message = 2;
inline bool ProtoPacket_OnionHead::_internal_has_onion_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoPacket_OnionHead::has_onion_message() const {
  return _internal_has_onion_message();
}
inline void ProtoPacket_OnionHead::clear_onion_message() {
  onion_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProtoPacket_OnionHead::onion_message() const {
  // @@protoc_insertion_point(field_get:protomessage.ProtoPacket.OnionHead.onion_message)
  return _internal_onion_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoPacket_OnionHead::set_onion_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 onion_message_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protomessage.ProtoPacket.OnionHead.onion_message)
}
inline std::string* ProtoPacket_OnionHead::mutable_onion_message() {
  std::string* _s = _internal_mutable_onion_message();
  // @@protoc_insertion_point(field_mutable:protomessage.ProtoPacket.OnionHead.onion_message)
  return _s;
}
inline const std::string& ProtoPacket_OnionHead::_internal_onion_message() const {
  return onion_message_.Get();
}
inline void ProtoPacket_OnionHead::_internal_set_onion_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  onion_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtoPacket_OnionHead::_internal_mutable_onion_message() {
  _has_bits_[0] |= 0x00000001u;
  return onion_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtoPacket_OnionHead::release_onion_message() {
  // @@protoc_insertion_point(field_release:protomessage.ProtoPacket.OnionHead.onion_message)
  if (!_internal_has_onion_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = onion_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (onion_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    onion_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProtoPacket_OnionHead::set_allocated_onion_message(std::string* onion_message) {
  if (onion_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  onion_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), onion_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (onion_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    onion_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protomessage.ProtoPacket.OnionHead.onion_message)
}

// optional bytes padding = 3;
inline bool ProtoPacket_OnionHead::_internal_has_padding() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProtoPacket_OnionHead::has_padding() const {
  return _internal_has_padding();
}
inline void ProtoPacket_OnionHead::clear_padding() {
  padding_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProtoPacket_OnionHead::padding() const {
  // @@protoc_insertion_point(field_get:protomessage.ProtoPacket.OnionHead.padding)
  return _internal_padding();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoPacket_OnionHead::set_padding(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 padding_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protomessage.ProtoPacket.OnionHead.padding)
}
inline std::string* ProtoPacket_OnionHead::mutable_padding() {
  std::string* _s = _internal_mutable_padding();
  // @@protoc_insertion_point(field_mutable:protomessage.ProtoPacket.OnionHead.padding)
  return _s;
}
inline const std::string& ProtoPacket_OnionHead::_internal_padding() const {
  return padding_.Get();
}
inline void ProtoPacket_OnionHead::_internal_set_padding(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  padding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtoPacket_OnionHead::_internal_mutable_padding() {
  _has_bits_[0] |= 0x00000002u;
  return padding_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtoPacket_OnionHead::release_padding() {
  // @@protoc_insertion_point(field_release:protomessage.ProtoPacket.OnionHead.padding)
  if (!_internal_has_padding()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = padding_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (padding_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    padding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProtoPacket_OnionHead::set_allocated_padding(std::string* padding) {
  if (padding != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  padding_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), padding,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (padding_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    padding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protomessage.ProtoPacket.OnionHead.padding)
}

// -------------------------------------------------------------------

// ProtoPacket_OnionBody

// optional int32 aggregatedValue = 1;
inline bool ProtoPacket_OnionBody::_internal_has_aggregatedvalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProtoPacket_OnionBody::has_aggregatedvalue() const {
  return _internal_has_aggregatedvalue();
}
inline void ProtoPacket_OnionBody::clear_aggregatedvalue() {
  aggregatedvalue_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ProtoPacket_OnionBody::_internal_aggregatedvalue() const {
  return aggregatedvalue_;
}
inline int32_t ProtoPacket_OnionBody::aggregatedvalue() const {
  // @@protoc_insertion_point(field_get:protomessage.ProtoPacket.OnionBody.aggregatedValue)
  return _internal_aggregatedvalue();
}
inline void ProtoPacket_OnionBody::_internal_set_aggregatedvalue(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  aggregatedvalue_ = value;
}
inline void ProtoPacket_OnionBody::set_aggregatedvalue(int32_t value) {
  _internal_set_aggregatedvalue(value);
  // @@protoc_insertion_point(field_set:protomessage.ProtoPacket.OnionBody.aggregatedValue)
}

// optional bytes padding = 2;
inline bool ProtoPacket_OnionBody::_internal_has_padding() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoPacket_OnionBody::has_padding() const {
  return _internal_has_padding();
}
inline void ProtoPacket_OnionBody::clear_padding() {
  padding_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProtoPacket_OnionBody::padding() const {
  // @@protoc_insertion_point(field_get:protomessage.ProtoPacket.OnionBody.padding)
  return _internal_padding();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoPacket_OnionBody::set_padding(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 padding_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protomessage.ProtoPacket.OnionBody.padding)
}
inline std::string* ProtoPacket_OnionBody::mutable_padding() {
  std::string* _s = _internal_mutable_padding();
  // @@protoc_insertion_point(field_mutable:protomessage.ProtoPacket.OnionBody.padding)
  return _s;
}
inline const std::string& ProtoPacket_OnionBody::_internal_padding() const {
  return padding_.Get();
}
inline void ProtoPacket_OnionBody::_internal_set_padding(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  padding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtoPacket_OnionBody::_internal_mutable_padding() {
  _has_bits_[0] |= 0x00000001u;
  return padding_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtoPacket_OnionBody::release_padding() {
  // @@protoc_insertion_point(field_release:protomessage.ProtoPacket.OnionBody.padding)
  if (!_internal_has_padding()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = padding_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (padding_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    padding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProtoPacket_OnionBody::set_allocated_padding(std::string* padding) {
  if (padding != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  padding_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), padding,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (padding_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    padding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protomessage.ProtoPacket.OnionBody.padding)
}

// -------------------------------------------------------------------

// ProtoPacket_Handshake

// optional bytes publickey = 1;
inline bool ProtoPacket_Handshake::_internal_has_publickey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoPacket_Handshake::has_publickey() const {
  return _internal_has_publickey();
}
inline void ProtoPacket_Handshake::clear_publickey() {
  publickey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProtoPacket_Handshake::publickey() const {
  // @@protoc_insertion_point(field_get:protomessage.ProtoPacket.Handshake.publickey)
  return _internal_publickey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtoPacket_Handshake::set_publickey(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 publickey_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protomessage.ProtoPacket.Handshake.publickey)
}
inline std::string* ProtoPacket_Handshake::mutable_publickey() {
  std::string* _s = _internal_mutable_publickey();
  // @@protoc_insertion_point(field_mutable:protomessage.ProtoPacket.Handshake.publickey)
  return _s;
}
inline const std::string& ProtoPacket_Handshake::_internal_publickey() const {
  return publickey_.Get();
}
inline void ProtoPacket_Handshake::_internal_set_publickey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtoPacket_Handshake::_internal_mutable_publickey() {
  _has_bits_[0] |= 0x00000001u;
  return publickey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtoPacket_Handshake::release_publickey() {
  // @@protoc_insertion_point(field_release:protomessage.ProtoPacket.Handshake.publickey)
  if (!_internal_has_publickey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = publickey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (publickey_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProtoPacket_Handshake::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  publickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (publickey_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protomessage.ProtoPacket.Handshake.publickey)
}

// -------------------------------------------------------------------

// ProtoPacket

// optional .protomessage.ProtoPacket.Handshake h_shake = 1;
inline bool ProtoPacket::_internal_has_h_shake() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || h_shake_ != nullptr);
  return value;
}
inline bool ProtoPacket::has_h_shake() const {
  return _internal_has_h_shake();
}
inline void ProtoPacket::clear_h_shake() {
  if (h_shake_ != nullptr) h_shake_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protomessage::ProtoPacket_Handshake& ProtoPacket::_internal_h_shake() const {
  const ::protomessage::ProtoPacket_Handshake* p = h_shake_;
  return p != nullptr ? *p : reinterpret_cast<const ::protomessage::ProtoPacket_Handshake&>(
      ::protomessage::_ProtoPacket_Handshake_default_instance_);
}
inline const ::protomessage::ProtoPacket_Handshake& ProtoPacket::h_shake() const {
  // @@protoc_insertion_point(field_get:protomessage.ProtoPacket.h_shake)
  return _internal_h_shake();
}
inline void ProtoPacket::unsafe_arena_set_allocated_h_shake(
    ::protomessage::ProtoPacket_Handshake* h_shake) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(h_shake_);
  }
  h_shake_ = h_shake;
  if (h_shake) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protomessage.ProtoPacket.h_shake)
}
inline ::protomessage::ProtoPacket_Handshake* ProtoPacket::release_h_shake() {
  _has_bits_[0] &= ~0x00000001u;
  ::protomessage::ProtoPacket_Handshake* temp = h_shake_;
  h_shake_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protomessage::ProtoPacket_Handshake* ProtoPacket::unsafe_arena_release_h_shake() {
  // @@protoc_insertion_point(field_release:protomessage.ProtoPacket.h_shake)
  _has_bits_[0] &= ~0x00000001u;
  ::protomessage::ProtoPacket_Handshake* temp = h_shake_;
  h_shake_ = nullptr;
  return temp;
}
inline ::protomessage::ProtoPacket_Handshake* ProtoPacket::_internal_mutable_h_shake() {
  _has_bits_[0] |= 0x00000001u;
  if (h_shake_ == nullptr) {
    auto* p = CreateMaybeMessage<::protomessage::ProtoPacket_Handshake>(GetArenaForAllocation());
    h_shake_ = p;
  }
  return h_shake_;
}
inline ::protomessage::ProtoPacket_Handshake* ProtoPacket::mutable_h_shake() {
  ::protomessage::ProtoPacket_Handshake* _msg = _internal_mutable_h_shake();
  // @@protoc_insertion_point(field_mutable:protomessage.ProtoPacket.h_shake)
  return _msg;
}
inline void ProtoPacket::set_allocated_h_shake(::protomessage::ProtoPacket_Handshake* h_shake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete h_shake_;
  }
  if (h_shake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protomessage::ProtoPacket_Handshake>::GetOwningArena(h_shake);
    if (message_arena != submessage_arena) {
      h_shake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, h_shake, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  h_shake_ = h_shake;
  // @@protoc_insertion_point(field_set_allocated:protomessage.ProtoPacket.h_shake)
}

// optional .protomessage.ProtoPacket.OnionHead o_head = 2;
inline bool ProtoPacket::_internal_has_o_head() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || o_head_ != nullptr);
  return value;
}
inline bool ProtoPacket::has_o_head() const {
  return _internal_has_o_head();
}
inline void ProtoPacket::clear_o_head() {
  if (o_head_ != nullptr) o_head_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protomessage::ProtoPacket_OnionHead& ProtoPacket::_internal_o_head() const {
  const ::protomessage::ProtoPacket_OnionHead* p = o_head_;
  return p != nullptr ? *p : reinterpret_cast<const ::protomessage::ProtoPacket_OnionHead&>(
      ::protomessage::_ProtoPacket_OnionHead_default_instance_);
}
inline const ::protomessage::ProtoPacket_OnionHead& ProtoPacket::o_head() const {
  // @@protoc_insertion_point(field_get:protomessage.ProtoPacket.o_head)
  return _internal_o_head();
}
inline void ProtoPacket::unsafe_arena_set_allocated_o_head(
    ::protomessage::ProtoPacket_OnionHead* o_head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(o_head_);
  }
  o_head_ = o_head;
  if (o_head) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protomessage.ProtoPacket.o_head)
}
inline ::protomessage::ProtoPacket_OnionHead* ProtoPacket::release_o_head() {
  _has_bits_[0] &= ~0x00000002u;
  ::protomessage::ProtoPacket_OnionHead* temp = o_head_;
  o_head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protomessage::ProtoPacket_OnionHead* ProtoPacket::unsafe_arena_release_o_head() {
  // @@protoc_insertion_point(field_release:protomessage.ProtoPacket.o_head)
  _has_bits_[0] &= ~0x00000002u;
  ::protomessage::ProtoPacket_OnionHead* temp = o_head_;
  o_head_ = nullptr;
  return temp;
}
inline ::protomessage::ProtoPacket_OnionHead* ProtoPacket::_internal_mutable_o_head() {
  _has_bits_[0] |= 0x00000002u;
  if (o_head_ == nullptr) {
    auto* p = CreateMaybeMessage<::protomessage::ProtoPacket_OnionHead>(GetArenaForAllocation());
    o_head_ = p;
  }
  return o_head_;
}
inline ::protomessage::ProtoPacket_OnionHead* ProtoPacket::mutable_o_head() {
  ::protomessage::ProtoPacket_OnionHead* _msg = _internal_mutable_o_head();
  // @@protoc_insertion_point(field_mutable:protomessage.ProtoPacket.o_head)
  return _msg;
}
inline void ProtoPacket::set_allocated_o_head(::protomessage::ProtoPacket_OnionHead* o_head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete o_head_;
  }
  if (o_head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protomessage::ProtoPacket_OnionHead>::GetOwningArena(o_head);
    if (message_arena != submessage_arena) {
      o_head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, o_head, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  o_head_ = o_head;
  // @@protoc_insertion_point(field_set_allocated:protomessage.ProtoPacket.o_head)
}

// optional .protomessage.ProtoPacket.OnionBody o_body = 3;
inline bool ProtoPacket::_internal_has_o_body() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || o_body_ != nullptr);
  return value;
}
inline bool ProtoPacket::has_o_body() const {
  return _internal_has_o_body();
}
inline void ProtoPacket::clear_o_body() {
  if (o_body_ != nullptr) o_body_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protomessage::ProtoPacket_OnionBody& ProtoPacket::_internal_o_body() const {
  const ::protomessage::ProtoPacket_OnionBody* p = o_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::protomessage::ProtoPacket_OnionBody&>(
      ::protomessage::_ProtoPacket_OnionBody_default_instance_);
}
inline const ::protomessage::ProtoPacket_OnionBody& ProtoPacket::o_body() const {
  // @@protoc_insertion_point(field_get:protomessage.ProtoPacket.o_body)
  return _internal_o_body();
}
inline void ProtoPacket::unsafe_arena_set_allocated_o_body(
    ::protomessage::ProtoPacket_OnionBody* o_body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(o_body_);
  }
  o_body_ = o_body;
  if (o_body) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protomessage.ProtoPacket.o_body)
}
inline ::protomessage::ProtoPacket_OnionBody* ProtoPacket::release_o_body() {
  _has_bits_[0] &= ~0x00000004u;
  ::protomessage::ProtoPacket_OnionBody* temp = o_body_;
  o_body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protomessage::ProtoPacket_OnionBody* ProtoPacket::unsafe_arena_release_o_body() {
  // @@protoc_insertion_point(field_release:protomessage.ProtoPacket.o_body)
  _has_bits_[0] &= ~0x00000004u;
  ::protomessage::ProtoPacket_OnionBody* temp = o_body_;
  o_body_ = nullptr;
  return temp;
}
inline ::protomessage::ProtoPacket_OnionBody* ProtoPacket::_internal_mutable_o_body() {
  _has_bits_[0] |= 0x00000004u;
  if (o_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::protomessage::ProtoPacket_OnionBody>(GetArenaForAllocation());
    o_body_ = p;
  }
  return o_body_;
}
inline ::protomessage::ProtoPacket_OnionBody* ProtoPacket::mutable_o_body() {
  ::protomessage::ProtoPacket_OnionBody* _msg = _internal_mutable_o_body();
  // @@protoc_insertion_point(field_mutable:protomessage.ProtoPacket.o_body)
  return _msg;
}
inline void ProtoPacket::set_allocated_o_body(::protomessage::ProtoPacket_OnionBody* o_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete o_body_;
  }
  if (o_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protomessage::ProtoPacket_OnionBody>::GetOwningArena(o_body);
    if (message_arena != submessage_arena) {
      o_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, o_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  o_body_ = o_body;
  // @@protoc_insertion_point(field_set_allocated:protomessage.ProtoPacket.o_body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protomessage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2dpacket_2eproto
